{"ast":null,"code":"import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, forwardRef, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nconst _c0 = [\"ref\"];\n\nfunction normalizeLineEndings(str) {\n  if (!str) {\n    return str;\n  }\n\n  return str.replace(/\\r\\n|\\r/g, '\\n');\n}\n\nclass CodemirrorComponent {\n  constructor(_differs, _ngZone) {\n    this._differs = _differs;\n    this._ngZone = _ngZone;\n    /* class applied to the created textarea */\n\n    this.className = '';\n    /* name applied to the created textarea */\n\n    this.name = 'codemirror';\n    /* autofocus setting applied to the created textarea */\n\n    this.autoFocus = false;\n    /* preserve previous scroll position after updating value */\n\n    this.preserveScrollPosition = false;\n    /* called when the text cursor is moved */\n\n    this.cursorActivity = new EventEmitter();\n    /* called when the editor is focused or loses focus */\n\n    this.focusChange = new EventEmitter();\n    /* called when the editor is scrolled */\n    // eslint-disable-next-line @angular-eslint/no-output-native\n\n    this.scroll = new EventEmitter();\n    /* called when file(s) are dropped */\n    // eslint-disable-next-line @angular-eslint/no-output-native\n\n    this.drop = new EventEmitter();\n    this.value = '';\n    this.disabled = false;\n    this.isFocused = false;\n    /** Implemented as part of ControlValueAccessor. */\n\n    this.onChange = _ => {};\n    /** Implemented as part of ControlValueAccessor. */\n\n\n    this.onTouched = () => {};\n  }\n  /**\n   * set options for codemirror\n   * @link http://codemirror.net/doc/manual.html#config\n   */\n\n\n  set options(value) {\n    this._options = value;\n\n    if (!this._differ && value) {\n      this._differ = this._differs.find(value).create();\n    }\n  }\n\n  get codeMirrorGlobal() {\n    if (this._codeMirror) {\n      return this._codeMirror;\n    } // in order to allow for universal rendering, we import Codemirror runtime with `require` to prevent node errors\n\n\n    this._codeMirror = typeof CodeMirror !== 'undefined' ? CodeMirror : import('codemirror');\n    return this._codeMirror;\n  }\n\n  ngAfterViewInit() {\n    this._ngZone.runOutsideAngular(() => __awaiter(this, void 0, void 0, function* () {\n      const codeMirrorObj = yield this.codeMirrorGlobal;\n      const codeMirror = (codeMirrorObj === null || codeMirrorObj === void 0 ? void 0 : codeMirrorObj.default) ? codeMirrorObj.default : codeMirrorObj;\n      this.codeMirror = codeMirror.fromTextArea(this.ref.nativeElement, this._options);\n      this.codeMirror.on('cursorActivity', cm => this._ngZone.run(() => this.cursorActive(cm)));\n      this.codeMirror.on('scroll', this.scrollChanged.bind(this));\n      this.codeMirror.on('blur', () => this._ngZone.run(() => this.focusChanged(false)));\n      this.codeMirror.on('focus', () => this._ngZone.run(() => this.focusChanged(true)));\n      this.codeMirror.on('change', (cm, change) => this._ngZone.run(() => this.codemirrorValueChanged(cm, change)));\n      this.codeMirror.on('drop', (cm, e) => {\n        this._ngZone.run(() => this.dropFiles(cm, e));\n      });\n      this.codeMirror.setValue(this.value);\n    }));\n  }\n\n  ngDoCheck() {\n    if (!this._differ) {\n      return;\n    } // check options have not changed\n\n\n    const changes = this._differ.diff(this._options);\n\n    if (changes) {\n      changes.forEachChangedItem(option => this.setOptionIfChanged(option.key, option.currentValue));\n      changes.forEachAddedItem(option => this.setOptionIfChanged(option.key, option.currentValue));\n      changes.forEachRemovedItem(option => this.setOptionIfChanged(option.key, option.currentValue));\n    }\n  }\n\n  ngOnDestroy() {\n    // is there a lighter-weight way to remove the cm instance?\n    if (this.codeMirror) {\n      this.codeMirror.toTextArea();\n    }\n  }\n\n  codemirrorValueChanged(cm, change) {\n    const cmVal = cm.getValue();\n\n    if (this.value !== cmVal) {\n      this.value = cmVal;\n      this.onChange(this.value);\n    }\n  }\n\n  setOptionIfChanged(optionName, newValue) {\n    if (!this.codeMirror) {\n      return;\n    } // cast to any to handle strictly typed option names\n    // could possibly import settings strings available in the future\n\n\n    this.codeMirror.setOption(optionName, newValue);\n  }\n\n  focusChanged(focused) {\n    this.onTouched();\n    this.isFocused = focused;\n    this.focusChange.emit(focused);\n  }\n\n  scrollChanged(cm) {\n    this.scroll.emit(cm.getScrollInfo());\n  }\n\n  cursorActive(cm) {\n    this.cursorActivity.emit(cm);\n  }\n\n  dropFiles(cm, e) {\n    this.drop.emit([cm, e]);\n  }\n  /** Implemented as part of ControlValueAccessor. */\n\n\n  writeValue(value) {\n    if (value === null || value === undefined) {\n      return;\n    }\n\n    if (!this.codeMirror) {\n      this.value = value;\n      return;\n    }\n\n    const cur = this.codeMirror.getValue();\n\n    if (value !== cur && normalizeLineEndings(cur) !== normalizeLineEndings(value)) {\n      this.value = value;\n\n      if (this.preserveScrollPosition) {\n        const prevScrollPosition = this.codeMirror.getScrollInfo();\n        this.codeMirror.setValue(this.value);\n        this.codeMirror.scrollTo(prevScrollPosition.left, prevScrollPosition.top);\n      } else {\n        this.codeMirror.setValue(this.value);\n      }\n    }\n  }\n  /** Implemented as part of ControlValueAccessor. */\n\n\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  /** Implemented as part of ControlValueAccessor. */\n\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  /** Implemented as part of ControlValueAccessor. */\n\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this.setOptionIfChanged('readOnly', this.disabled);\n  }\n\n}\n\nCodemirrorComponent.ɵfac = function CodemirrorComponent_Factory(t) {\n  return new (t || CodemirrorComponent)(i0.ɵɵdirectiveInject(i0.KeyValueDiffers), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nCodemirrorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CodemirrorComponent,\n  selectors: [[\"ngx-codemirror\"]],\n  viewQuery: function CodemirrorComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ref = _t.first);\n    }\n  },\n  inputs: {\n    className: \"className\",\n    name: \"name\",\n    autoFocus: \"autoFocus\",\n    options: \"options\",\n    preserveScrollPosition: \"preserveScrollPosition\"\n  },\n  outputs: {\n    cursorActivity: \"cursorActivity\",\n    focusChange: \"focusChange\",\n    scroll: \"scroll\",\n    drop: \"drop\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CodemirrorComponent),\n    multi: true\n  }])],\n  decls: 3,\n  vars: 7,\n  consts: [[\"autocomplete\", \"off\", 3, \"name\", \"autofocus\"], [\"ref\", \"\"]],\n  template: function CodemirrorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"textarea\", 0, 1);\n      i0.ɵɵtext(2, \"    \");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMapInterpolate1(\"ngx-codemirror \", ctx.className, \"\");\n      i0.ɵɵclassProp(\"ngx-codemirror--focused\", ctx.isFocused);\n      i0.ɵɵproperty(\"name\", ctx.name)(\"autofocus\", ctx.autoFocus);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CodemirrorComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-codemirror',\n      template: `\n    <textarea\n      [name]=\"name\"\n      class=\"ngx-codemirror {{ className }}\"\n      [class.ngx-codemirror--focused]=\"isFocused\"\n      autocomplete=\"off\"\n      [autofocus]=\"autoFocus\"\n      #ref\n    >\n    </textarea>\n  `,\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => CodemirrorComponent),\n        multi: true\n      }],\n      preserveWhitespaces: false,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.KeyValueDiffers\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    className: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    autoFocus: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    preserveScrollPosition: [{\n      type: Input\n    }],\n    cursorActivity: [{\n      type: Output\n    }],\n    focusChange: [{\n      type: Output\n    }],\n    scroll: [{\n      type: Output\n    }],\n    drop: [{\n      type: Output\n    }],\n    ref: [{\n      type: ViewChild,\n      args: ['ref']\n    }]\n  });\n})();\n\nclass CodemirrorModule {}\n\nCodemirrorModule.ɵfac = function CodemirrorModule_Factory(t) {\n  return new (t || CodemirrorModule)();\n};\n\nCodemirrorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CodemirrorModule\n});\nCodemirrorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CodemirrorModule, [{\n    type: NgModule,\n    args: [{\n      exports: [CodemirrorComponent],\n      declarations: [CodemirrorComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CodemirrorComponent, CodemirrorModule };","map":{"version":3,"sources":["C:/Firebase/FleekStars/fleek-stars/node_modules/@ctrl/ngx-codemirror/fesm2015/ctrl-ngx-codemirror.mjs"],"names":["__awaiter","i0","EventEmitter","forwardRef","Component","ChangeDetectionStrategy","Input","Output","ViewChild","NgModule","NG_VALUE_ACCESSOR","normalizeLineEndings","str","replace","CodemirrorComponent","constructor","_differs","_ngZone","className","name","autoFocus","preserveScrollPosition","cursorActivity","focusChange","scroll","drop","value","disabled","isFocused","onChange","_","onTouched","options","_options","_differ","find","create","codeMirrorGlobal","_codeMirror","CodeMirror","ngAfterViewInit","runOutsideAngular","codeMirrorObj","codeMirror","default","fromTextArea","ref","nativeElement","on","cm","run","cursorActive","scrollChanged","bind","focusChanged","change","codemirrorValueChanged","e","dropFiles","setValue","ngDoCheck","changes","diff","forEachChangedItem","option","setOptionIfChanged","key","currentValue","forEachAddedItem","forEachRemovedItem","ngOnDestroy","toTextArea","cmVal","getValue","optionName","newValue","setOption","focused","emit","getScrollInfo","writeValue","undefined","cur","prevScrollPosition","scrollTo","left","top","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","ɵfac","KeyValueDiffers","NgZone","ɵcmp","provide","useExisting","multi","type","args","selector","template","providers","preserveWhitespaces","changeDetection","OnPush","CodemirrorModule","ɵmod","ɵinj","exports","declarations"],"mappings":"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","sourcesContent":["import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, forwardRef, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nfunction normalizeLineEndings(str) {\n    if (!str) {\n        return str;\n    }\n    return str.replace(/\\r\\n|\\r/g, '\\n');\n}\nclass CodemirrorComponent {\n    constructor(_differs, _ngZone) {\n        this._differs = _differs;\n        this._ngZone = _ngZone;\n        /* class applied to the created textarea */\n        this.className = '';\n        /* name applied to the created textarea */\n        this.name = 'codemirror';\n        /* autofocus setting applied to the created textarea */\n        this.autoFocus = false;\n        /* preserve previous scroll position after updating value */\n        this.preserveScrollPosition = false;\n        /* called when the text cursor is moved */\n        this.cursorActivity = new EventEmitter();\n        /* called when the editor is focused or loses focus */\n        this.focusChange = new EventEmitter();\n        /* called when the editor is scrolled */\n        // eslint-disable-next-line @angular-eslint/no-output-native\n        this.scroll = new EventEmitter();\n        /* called when file(s) are dropped */\n        // eslint-disable-next-line @angular-eslint/no-output-native\n        this.drop = new EventEmitter();\n        this.value = '';\n        this.disabled = false;\n        this.isFocused = false;\n        /** Implemented as part of ControlValueAccessor. */\n        this.onChange = (_) => { };\n        /** Implemented as part of ControlValueAccessor. */\n        this.onTouched = () => { };\n    }\n    /**\n     * set options for codemirror\n     * @link http://codemirror.net/doc/manual.html#config\n     */\n    set options(value) {\n        this._options = value;\n        if (!this._differ && value) {\n            this._differ = this._differs.find(value).create();\n        }\n    }\n    get codeMirrorGlobal() {\n        if (this._codeMirror) {\n            return this._codeMirror;\n        }\n        // in order to allow for universal rendering, we import Codemirror runtime with `require` to prevent node errors\n        this._codeMirror = typeof CodeMirror !== 'undefined' ? CodeMirror : import('codemirror');\n        return this._codeMirror;\n    }\n    ngAfterViewInit() {\n        this._ngZone.runOutsideAngular(() => __awaiter(this, void 0, void 0, function* () {\n            const codeMirrorObj = yield this.codeMirrorGlobal;\n            const codeMirror = (codeMirrorObj === null || codeMirrorObj === void 0 ? void 0 : codeMirrorObj.default) ? codeMirrorObj.default : codeMirrorObj;\n            this.codeMirror = codeMirror.fromTextArea(this.ref.nativeElement, this._options);\n            this.codeMirror.on('cursorActivity', cm => this._ngZone.run(() => this.cursorActive(cm)));\n            this.codeMirror.on('scroll', this.scrollChanged.bind(this));\n            this.codeMirror.on('blur', () => this._ngZone.run(() => this.focusChanged(false)));\n            this.codeMirror.on('focus', () => this._ngZone.run(() => this.focusChanged(true)));\n            this.codeMirror.on('change', (cm, change) => this._ngZone.run(() => this.codemirrorValueChanged(cm, change)));\n            this.codeMirror.on('drop', (cm, e) => {\n                this._ngZone.run(() => this.dropFiles(cm, e));\n            });\n            this.codeMirror.setValue(this.value);\n        }));\n    }\n    ngDoCheck() {\n        if (!this._differ) {\n            return;\n        }\n        // check options have not changed\n        const changes = this._differ.diff(this._options);\n        if (changes) {\n            changes.forEachChangedItem(option => this.setOptionIfChanged(option.key, option.currentValue));\n            changes.forEachAddedItem(option => this.setOptionIfChanged(option.key, option.currentValue));\n            changes.forEachRemovedItem(option => this.setOptionIfChanged(option.key, option.currentValue));\n        }\n    }\n    ngOnDestroy() {\n        // is there a lighter-weight way to remove the cm instance?\n        if (this.codeMirror) {\n            this.codeMirror.toTextArea();\n        }\n    }\n    codemirrorValueChanged(cm, change) {\n        const cmVal = cm.getValue();\n        if (this.value !== cmVal) {\n            this.value = cmVal;\n            this.onChange(this.value);\n        }\n    }\n    setOptionIfChanged(optionName, newValue) {\n        if (!this.codeMirror) {\n            return;\n        }\n        // cast to any to handle strictly typed option names\n        // could possibly import settings strings available in the future\n        this.codeMirror.setOption(optionName, newValue);\n    }\n    focusChanged(focused) {\n        this.onTouched();\n        this.isFocused = focused;\n        this.focusChange.emit(focused);\n    }\n    scrollChanged(cm) {\n        this.scroll.emit(cm.getScrollInfo());\n    }\n    cursorActive(cm) {\n        this.cursorActivity.emit(cm);\n    }\n    dropFiles(cm, e) {\n        this.drop.emit([cm, e]);\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value) {\n        if (value === null || value === undefined) {\n            return;\n        }\n        if (!this.codeMirror) {\n            this.value = value;\n            return;\n        }\n        const cur = this.codeMirror.getValue();\n        if (value !== cur && normalizeLineEndings(cur) !== normalizeLineEndings(value)) {\n            this.value = value;\n            if (this.preserveScrollPosition) {\n                const prevScrollPosition = this.codeMirror.getScrollInfo();\n                this.codeMirror.setValue(this.value);\n                this.codeMirror.scrollTo(prevScrollPosition.left, prevScrollPosition.top);\n            }\n            else {\n                this.codeMirror.setValue(this.value);\n            }\n        }\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.setOptionIfChanged('readOnly', this.disabled);\n    }\n}\nCodemirrorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: CodemirrorComponent, deps: [{ token: i0.KeyValueDiffers }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nCodemirrorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.2\", type: CodemirrorComponent, selector: \"ngx-codemirror\", inputs: { className: \"className\", name: \"name\", autoFocus: \"autoFocus\", options: \"options\", preserveScrollPosition: \"preserveScrollPosition\" }, outputs: { cursorActivity: \"cursorActivity\", focusChange: \"focusChange\", scroll: \"scroll\", drop: \"drop\" }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => CodemirrorComponent),\n            multi: true,\n        },\n    ], viewQueries: [{ propertyName: \"ref\", first: true, predicate: [\"ref\"], descendants: true }], ngImport: i0, template: `\n    <textarea\n      [name]=\"name\"\n      class=\"ngx-codemirror {{ className }}\"\n      [class.ngx-codemirror--focused]=\"isFocused\"\n      autocomplete=\"off\"\n      [autofocus]=\"autoFocus\"\n      #ref\n    >\n    </textarea>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: CodemirrorComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ngx-codemirror',\n                    template: `\n    <textarea\n      [name]=\"name\"\n      class=\"ngx-codemirror {{ className }}\"\n      [class.ngx-codemirror--focused]=\"isFocused\"\n      autocomplete=\"off\"\n      [autofocus]=\"autoFocus\"\n      #ref\n    >\n    </textarea>\n  `,\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => CodemirrorComponent),\n                            multi: true,\n                        },\n                    ],\n                    preserveWhitespaces: false,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.KeyValueDiffers }, { type: i0.NgZone }]; }, propDecorators: { className: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], autoFocus: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], preserveScrollPosition: [{\n                type: Input\n            }], cursorActivity: [{\n                type: Output\n            }], focusChange: [{\n                type: Output\n            }], scroll: [{\n                type: Output\n            }], drop: [{\n                type: Output\n            }], ref: [{\n                type: ViewChild,\n                args: ['ref']\n            }] } });\n\nclass CodemirrorModule {\n}\nCodemirrorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: CodemirrorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCodemirrorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: CodemirrorModule, declarations: [CodemirrorComponent], exports: [CodemirrorComponent] });\nCodemirrorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: CodemirrorModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: CodemirrorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CodemirrorComponent],\n                    declarations: [CodemirrorComponent],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CodemirrorComponent, CodemirrorModule };\n"]},"metadata":{},"sourceType":"module"}