{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../mode/sql/sql\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../mode/sql/sql\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var tables;\n  var defaultTable;\n  var keywords;\n  var identifierQuote;\n  var CONS = {\n    QUERY_DIV: \";\",\n    ALIAS_KEYWORD: \"AS\"\n  };\n  var Pos = CodeMirror.Pos,\n      cmpPos = CodeMirror.cmpPos;\n\n  function isArray(val) {\n    return Object.prototype.toString.call(val) == \"[object Array]\";\n  }\n\n  function getKeywords(editor) {\n    var mode = editor.doc.modeOption;\n    if (mode === \"sql\") mode = \"text/x-sql\";\n    return CodeMirror.resolveMode(mode).keywords;\n  }\n\n  function getIdentifierQuote(editor) {\n    var mode = editor.doc.modeOption;\n    if (mode === \"sql\") mode = \"text/x-sql\";\n    return CodeMirror.resolveMode(mode).identifierQuote || \"`\";\n  }\n\n  function getText(item) {\n    return typeof item == \"string\" ? item : item.text;\n  }\n\n  function wrapTable(name, value) {\n    if (isArray(value)) value = {\n      columns: value\n    };\n    if (!value.text) value.text = name;\n    return value;\n  }\n\n  function parseTables(input) {\n    var result = {};\n\n    if (isArray(input)) {\n      for (var i = input.length - 1; i >= 0; i--) {\n        var item = input[i];\n        result[getText(item).toUpperCase()] = wrapTable(getText(item), item);\n      }\n    } else if (input) {\n      for (var name in input) result[name.toUpperCase()] = wrapTable(name, input[name]);\n    }\n\n    return result;\n  }\n\n  function getTable(name) {\n    return tables[name.toUpperCase()];\n  }\n\n  function shallowClone(object) {\n    var result = {};\n\n    for (var key in object) if (object.hasOwnProperty(key)) result[key] = object[key];\n\n    return result;\n  }\n\n  function match(string, word) {\n    var len = string.length;\n    var sub = getText(word).substr(0, len);\n    return string.toUpperCase() === sub.toUpperCase();\n  }\n\n  function addMatches(result, search, wordlist, formatter) {\n    if (isArray(wordlist)) {\n      for (var i = 0; i < wordlist.length; i++) if (match(search, wordlist[i])) result.push(formatter(wordlist[i]));\n    } else {\n      for (var word in wordlist) if (wordlist.hasOwnProperty(word)) {\n        var val = wordlist[word];\n        if (!val || val === true) val = word;else val = val.displayText ? {\n          text: val.text,\n          displayText: val.displayText\n        } : val.text;\n        if (match(search, val)) result.push(formatter(val));\n      }\n    }\n  }\n\n  function cleanName(name) {\n    // Get rid name from identifierQuote and preceding dot(.)\n    if (name.charAt(0) == \".\") {\n      name = name.substr(1);\n    } // replace doublicated identifierQuotes with single identifierQuotes\n    // and remove single identifierQuotes\n\n\n    var nameParts = name.split(identifierQuote + identifierQuote);\n\n    for (var i = 0; i < nameParts.length; i++) nameParts[i] = nameParts[i].replace(new RegExp(identifierQuote, \"g\"), \"\");\n\n    return nameParts.join(identifierQuote);\n  }\n\n  function insertIdentifierQuotes(name) {\n    var nameParts = getText(name).split(\".\");\n\n    for (var i = 0; i < nameParts.length; i++) nameParts[i] = identifierQuote + // doublicate identifierQuotes\n    nameParts[i].replace(new RegExp(identifierQuote, \"g\"), identifierQuote + identifierQuote) + identifierQuote;\n\n    var escaped = nameParts.join(\".\");\n    if (typeof name == \"string\") return escaped;\n    name = shallowClone(name);\n    name.text = escaped;\n    return name;\n  }\n\n  function nameCompletion(cur, token, result, editor) {\n    // Try to complete table, column names and return start position of completion\n    var useIdentifierQuotes = false;\n    var nameParts = [];\n    var start = token.start;\n    var cont = true;\n\n    while (cont) {\n      cont = token.string.charAt(0) == \".\";\n      useIdentifierQuotes = useIdentifierQuotes || token.string.charAt(0) == identifierQuote;\n      start = token.start;\n      nameParts.unshift(cleanName(token.string));\n      token = editor.getTokenAt(Pos(cur.line, token.start));\n\n      if (token.string == \".\") {\n        cont = true;\n        token = editor.getTokenAt(Pos(cur.line, token.start));\n      }\n    } // Try to complete table names\n\n\n    var string = nameParts.join(\".\");\n    addMatches(result, string, tables, function (w) {\n      return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n    }); // Try to complete columns from defaultTable\n\n    addMatches(result, string, defaultTable, function (w) {\n      return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n    }); // Try to complete columns\n\n    string = nameParts.pop();\n    var table = nameParts.join(\".\");\n    var alias = false;\n    var aliasTable = table; // Check if table is available. If not, find table by Alias\n\n    if (!getTable(table)) {\n      var oldTable = table;\n      table = findTableByAlias(table, editor);\n      if (table !== oldTable) alias = true;\n    }\n\n    var columns = getTable(table);\n    if (columns && columns.columns) columns = columns.columns;\n\n    if (columns) {\n      addMatches(result, string, columns, function (w) {\n        var tableInsert = table;\n        if (alias == true) tableInsert = aliasTable;\n\n        if (typeof w == \"string\") {\n          w = tableInsert + \".\" + w;\n        } else {\n          w = shallowClone(w);\n          w.text = tableInsert + \".\" + w.text;\n        }\n\n        return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n      });\n    }\n\n    return start;\n  }\n\n  function eachWord(lineText, f) {\n    var words = lineText.split(/\\s+/);\n\n    for (var i = 0; i < words.length; i++) if (words[i]) f(words[i].replace(/[,;]/g, ''));\n  }\n\n  function findTableByAlias(alias, editor) {\n    var doc = editor.doc;\n    var fullQuery = doc.getValue();\n    var aliasUpperCase = alias.toUpperCase();\n    var previousWord = \"\";\n    var table = \"\";\n    var separator = [];\n    var validRange = {\n      start: Pos(0, 0),\n      end: Pos(editor.lastLine(), editor.getLineHandle(editor.lastLine()).length)\n    }; //add separator\n\n    var indexOfSeparator = fullQuery.indexOf(CONS.QUERY_DIV);\n\n    while (indexOfSeparator != -1) {\n      separator.push(doc.posFromIndex(indexOfSeparator));\n      indexOfSeparator = fullQuery.indexOf(CONS.QUERY_DIV, indexOfSeparator + 1);\n    }\n\n    separator.unshift(Pos(0, 0));\n    separator.push(Pos(editor.lastLine(), editor.getLineHandle(editor.lastLine()).text.length)); //find valid range\n\n    var prevItem = null;\n    var current = editor.getCursor();\n\n    for (var i = 0; i < separator.length; i++) {\n      if ((prevItem == null || cmpPos(current, prevItem) > 0) && cmpPos(current, separator[i]) <= 0) {\n        validRange = {\n          start: prevItem,\n          end: separator[i]\n        };\n        break;\n      }\n\n      prevItem = separator[i];\n    }\n\n    if (validRange.start) {\n      var query = doc.getRange(validRange.start, validRange.end, false);\n\n      for (var i = 0; i < query.length; i++) {\n        var lineText = query[i];\n        eachWord(lineText, function (word) {\n          var wordUpperCase = word.toUpperCase();\n          if (wordUpperCase === aliasUpperCase && getTable(previousWord)) table = previousWord;\n          if (wordUpperCase !== CONS.ALIAS_KEYWORD) previousWord = word;\n        });\n        if (table) break;\n      }\n    }\n\n    return table;\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"sql\", function (editor, options) {\n    tables = parseTables(options && options.tables);\n    var defaultTableName = options && options.defaultTable;\n    var disableKeywords = options && options.disableKeywords;\n    defaultTable = defaultTableName && getTable(defaultTableName);\n    keywords = getKeywords(editor);\n    identifierQuote = getIdentifierQuote(editor);\n    if (defaultTableName && !defaultTable) defaultTable = findTableByAlias(defaultTableName, editor);\n    defaultTable = defaultTable || [];\n    if (defaultTable.columns) defaultTable = defaultTable.columns;\n    var cur = editor.getCursor();\n    var result = [];\n    var token = editor.getTokenAt(cur),\n        start,\n        end,\n        search;\n\n    if (token.end > cur.ch) {\n      token.end = cur.ch;\n      token.string = token.string.slice(0, cur.ch - token.start);\n    }\n\n    if (token.string.match(/^[.`\"'\\w@][\\w$#]*$/g)) {\n      search = token.string;\n      start = token.start;\n      end = token.end;\n    } else {\n      start = end = cur.ch;\n      search = \"\";\n    }\n\n    if (search.charAt(0) == \".\" || search.charAt(0) == identifierQuote) {\n      start = nameCompletion(cur, token, result, editor);\n    } else {\n      var objectOrClass = function (w, className) {\n        if (typeof w === \"object\") {\n          w.className = className;\n        } else {\n          w = {\n            text: w,\n            className: className\n          };\n        }\n\n        return w;\n      };\n\n      addMatches(result, search, defaultTable, function (w) {\n        return objectOrClass(w, \"CodeMirror-hint-table CodeMirror-hint-default-table\");\n      });\n      addMatches(result, search, tables, function (w) {\n        return objectOrClass(w, \"CodeMirror-hint-table\");\n      });\n      if (!disableKeywords) addMatches(result, search, keywords, function (w) {\n        return objectOrClass(w.toUpperCase(), \"CodeMirror-hint-keyword\");\n      });\n    }\n\n    return {\n      list: result,\n      from: Pos(cur.line, start),\n      to: Pos(cur.line, end)\n    };\n  });\n});","map":null,"metadata":{},"sourceType":"script"}